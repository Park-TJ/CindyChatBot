# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'testui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from seq2seq.Seq2Seq_model_class import seq2seq
from ner import ner_class
from intent_data.intent_cl import Intent_model
from bs4 import BeautifulSoup
import requests
import pandas as pd
import numpy as np

class Ui_MainWindow():

    def __init__(self, seq2seq, ner, intent):
        self.seq2seq = seq2seq
        self.ner = ner
        self.intent = intent

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(454, 514)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(347, 384, 104, 81))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.sendtxt)
        self.pushButton.setStyleSheet("color: blue;"
                               "background-color: #87CEFA;"
                               "border-style: dashed;"
                               "border-width: 3px;"
                               "border-color: #1E90FF;"
                                "border-top-right-radius: 5px; "
                                "border-bottom-right-radius: 5px; "
                                "margin-left:-3px;"
                                    )

        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 454, 381))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setAcceptRichText(True)
        self.textBrowser.setOpenExternalLinks(True)
        self.textBrowser.setStyleSheet(
                                       "background: url('./img/tb_bg3.jpg');no-repeat;"
                                       "border-color: #1E90FF;"
                                       "border-style: solid;"
                                       )


        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(1, 385, 350, 81))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.returnPressed.connect(self.sendtxt)
        self.lineEdit.setStyleSheet("color: blue;"
                               "background-color: #87CEFA;"
                               "border-style: dashed;"
                               "border-width: 3px;"
                               "border-color: #1E90FF;"
                                "border-top-left-radius: 5px;"
                                "border-bottom-left-radius: 5px;"
                                "margin-right:-4px"
                                    )


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 454, 21))
        self.menubar.setObjectName("menubar")
        self.menuChatBot = QtWidgets.QMenu(self.menubar)
        self.menuChatBot.setObjectName("menuChatBot")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuChatBot.menuAction())

        self.initAction = QtWidgets.QAction(MainWindow)
        self.initAction.setObjectName('initAction')
        self.initAction.setShortcut("Ctrl+N")
        self.initAction.setStatusTip('TextBrowser Reset')
        self.initAction.triggered.connect(self.init_application)
        self.menuChatBot.addAction(self.initAction)

        self.closeAction = QtWidgets.QAction(MainWindow)
        self.closeAction.setObjectName('closeAction')
        self.closeAction.setShortcut("Ctrl+Q")
        self.closeAction.setStatusTip('End application')
        self.closeAction.triggered.connect(self.close_application)
        self.menuChatBot.addAction(self.closeAction)

        self.helpAction = QtWidgets.QAction(MainWindow)
        self.helpAction.setObjectName('helpAction')
        self.helpAction.setShortcut("Ctrl+H")
        self.helpAction.setStatusTip('Help')
        self.helpAction.triggered.connect(self.help_application)
        self.menuChatBot.addAction(self.helpAction)

        self.retranslateUi(MainWindow)
        MainWindow.setFixedSize(454, 508)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def help_application(self):
        self.textBrowser.append('<p>날씨와 뉴스,버스확인 및 간단한 일상대화가 가능합니다.</p>')
        self.textBrowser.append('')
        self.textBrowser.append('<p>1. 날씨 - 위치,날짜 정보가 필요합니다. (Google Weather)</p>')
        self.textBrowser.append('<p>2. 뉴스 - 카테고리 정보로 필요한 뉴스만 가져옵니다. (Naver News)</p>')
        self.textBrowser.append('<p>3. 버스 - 현재 얼마나 남았는지 확인합니다. (API)</p>')
        self.textBrowser.append('<p>4. 맛집 - 다음맵에서 맛집의 위치와 평점을 조회합니다. (API)</p>')
        self.textBrowser.append('<p>5. 일상대화 - Seq2Seq에 학습된 내용으로 대화합니다.</p>')

    def close_application(self):
        print("Close!")
        sys.exit()

    def init_application(self):
        self.textBrowser.clear()

    def get_question(self,txt):
        return "<table width='99%' style = 'margin-bottom:8px;border-collapse:collapse;border-color:#9ABAD9;border-spacing:0'> <tbody><tr><td width='7%' valign='top'><img width='45' height='50' src='./ner/img/c_icon1.png'></td><td style='max-width:60%;background-color:#ffc702;border-color:#9ABAD9;border-style:solid;border-width:1px;color:#000000;font-family:'Courier New', Courier, monospace !important;;font-size:14px;font-weight:normal;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:middle;word-break:normal;' valign='middle'>&nbsp;"+txt+"</td><td></td></tr></tbody></table>"

    def get_answer(self,txt):
        return "<table width='99%' style = 'margin-bottom:12px;border-collapse:collapse;border-color:#9ABAD9;border-spacing:0'> <tbody><tr><td width='33%'></td><td class='bradius' style='max-width:60%;background-color:#ffc702;border-color:#68cbd0;border-style:solid;border-width:1px;color:#000000;font-family:'Courier New', Courier, monospace !important;;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:middle;word-break:normal;' valign='middle'>&nbsp;"+ txt +"</td><td width='7%' valign='top'><img width='45' height='50' src='./ner/img/ai_img2.png'></td></tr></tbody></table>"

    def sendtxt(self):
        txt = self.lineEdit.text()
        self.textBrowser.append(self.get_question(txt))
        if self.intent.intent_classification(txt) == 'normal':
            print('normal')
            self.textBrowser.append(self.get_answer(self.seq2seq.get_answer(txt)))
        elif self.intent.intent_classification(txt) == 'weather':
            print('weather')
            answer = self.ner.get_weather(txt)
            if answer.find('?') >= 0 :
                weather_txt = self.get_answer(answer)
            else:
                weather_txt = "<table width='99%' style = 'margin-bottom:5px;border-collapse:collapse;border-color:#9ABAD9;border-spacing:0'> <tbody><tr><td width='70%'></td><td style='max-width:23%;background-color:#ffc702;border-color:#68cbd0;border-style:solid;border-width:1px;color:#000000;font-family:'Courier New', Courier, monospace !important;;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:middle;word-break:normal;' align='center'>" + answer + "</td><td width='7%' valign='top'><img width='45' height='50' src='./ner/img/ai_img2.png'></td></tr></tbody></table>"
            self.textBrowser.append(weather_txt)
        elif self.intent.intent_classification(txt) == 'news':
            print('news')
            answer = self.ner.get_news(txt)
            if answer.find('table') >= 0:
                news_txt = "<table width='99%' style = 'margin-bottom:5px;border-collapse:collapse;border-color:#9ABAD9;border-spacing:0'> <tbody><tr><td width='20%'></td><td style='max-width:73%;background-color:#ffc702;border-color:#68cbd0;border-style:solid;border-width:1px;color:#000000;font-family:'Courier New', Courier, monospace !important;;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:middle;word-break:normal;' align='center'>" + answer + "</td><td width='7%' valign='top'><img width='45' height='50' src='./ner/img/ai_img2.png'></td></tr></tbody></table>"
            else:
                news_txt = self.get_answer(answer)
            self.textBrowser.append(news_txt)
        elif self.intent.intent_classification(txt) == 'bus':
            print('bus')
            self.textBrowser.append(self.bus_return())
        elif self.intent.intent_classification(txt) == 'food':
            print('food')
            answer = self.ner.get_food(txt)
            food_txt = "<table width='99%' style = 'margin-bottom:5px;border-collapse:collapse;border-color:#9ABAD9;border-spacing:0'> <tbody><tr><td width='20%'></td><td style='max-width:73%;background-color:#ffc702;border-color:#68cbd0;border-style:solid;border-width:1px;color:#000000;font-family:'Courier New', Courier, monospace !important;;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:middle;word-break:normal;' align='center'>" + answer + "</td><td width='7%' valign='top'><img width='45' height='50' src='./ner/img/ai_img2.png'></td></tr></tbody></table>"
            self.textBrowser.append(food_txt)
        else:
            print('others')
            self.textBrowser.append(self.get_answer('질문의 의도를 파악하지 못했습니다.'))
        self.lineEdit.clear()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "전송"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Gulim\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.menuChatBot.setTitle(_translate("MainWindow", "신디 BOT"))
        self.initAction.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.initAction.setText(_translate("MainWindow", "화면 정리(Clear)"))
        self.closeAction.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.closeAction.setText(_translate("MainWindow", "프로그램 종료(Exit)"))
        self.helpAction.setShortcut(_translate("MainWindow", "Ctrl+H"))
        self.helpAction.setText(_translate("MainWindow", "도움말(Help)"))

    def bus_return(self):
        key_arr = 'uT%2FAMrOcWpghNs4xHp3FjieaLaQgbS0a6x5u5BoRLVaaCliUAuJ5expUGp1kXUjw%2F%2BX6UrG2mmRxGhdjXVezHA%3D%3D'
        stId = '100000054'
        queryParams_arr = 'ServiceKey=' + key_arr + '&stId=' + stId
        url_arr = 'http://ws.bus.go.kr/api/rest/arrive/getLowArrInfoByStId?' + queryParams_arr
        # print(url_arr)
        req = requests.get(url_arr)
        html = req.text
        soup = BeautifulSoup(html, 'html.parser')
        founded_set = soup.findAll('itemlist')
        bus_data_API = pd.DataFrame()
        time_list = []
        bus_list = []
        sec_list = []
        station_list = []
        txt = ''

        for i in founded_set:
            try:
                if i.find('arrmsg1').text in {'운행종료', '출발대기', '회차대기'}:
                    pass
                elif i.find('arrmsg1').text != '곧 도착':
                    time_tmp = str(i.find('arrmsg1').text)
                    time_list.append(time_tmp)
                    min = time_tmp[:time_tmp.find('분')]
                    sec = time_tmp[time_tmp.find('분') + 1: time_tmp.find('초')]
                    sec = int(min) * 60 + int(sec)
                    sec_list.append(sec)
                    bus_list.append(i.find('rtnm').text)
                    station_list.append(i.find('stationnm1').text)
                else:
                    time_tmp = str(i.find('arrmsg1').text)
                    time_list.append(time_tmp)
                    bus_list.append(i.find('rtnm').text)
                    sec_list.append(0)
                    station_list.append(i.find('stationnm1').text)

            except ValueError:
                pass

        min_list = [len(time_list), len(bus_list), len(station_list)]
        min = np.min(min_list)

        # print(time_list, bus_list, sec_list, station_list)
        try:

            bus_data_API['time'] = time_list[:min]
            bus_data_API['bus_num'] = bus_list[:min]
            bus_data_API['sec_list'] = sec_list[:min]
            bus_data_API['station_list'] = station_list[:min]
            bus_data_API = bus_data_API.sort_values(by='sec_list').iloc[:10].reset_index(drop=True)

            for i in bus_data_API.index:
                txt += "<tr><td align='center'>{}</td><td align='center'>{}</td><td align='center'>{}</td></tr>".format(
                    bus_data_API.loc[i]['station_list'],
                    bus_data_API.loc[i]['bus_num'],
                    bus_data_API.loc[i]['time'])
                # if bus_data_API.loc[i]['time'] == '곧 도착':
                #     txt = txt + bus_data_API.loc[i]['station_list'] + ' 정류장으로 가는 ' + bus_data_API.loc[i][
                #         'bus_num'] + '번 버스가 ' + bus_data_API.loc[i]['time'] + '합니다.\n'
                # else:
                #     txt = txt + bus_data_API.loc[i]['station_list'] + ' 정류장으로 가는 ' + bus_data_API.loc[i][
                #         'bus_num'] + '번 버스가 ' + bus_data_API.loc[i]['time'] + '뒤에 도착합니다.\n'

            # num = input('몇번 버스가 궁금하시나요? ('+' '.join(bus_list) + ')' + '->')

        except ValueError:

            bus_data_API['time'] = time_list[:min]
            bus_data_API['bus_num'] = bus_list[:min]
            bus_data_API['sec_list'] = sec_list[:min]
            bus_data_API['station_list'] = station_list[:min]
            bus_data_API = bus_data_API.sort_values(by='sec_list').iloc[:10].reset_index(drop=True)

            for i in bus_data_API.index:
                txt += "<tr><td align='center'>{}</td><td align='center'>{}</td><td align='center'>{}</td></tr>".format(bus_data_API.loc[i]['station_list'],
                                                                           bus_data_API.loc[i]['bus_num'],
                                                                           bus_data_API.loc[i]['time'])
                # if bus_data_API.loc[i]['time'] == '곧 도착':
                #     txt = txt + bus_data_API.loc[i]['station_list'] + ' 정류장으로 가는 ' + bus_data_API.loc[i][
                #         'bus_num'] + '번 버스가 ' + bus_data_API.loc[i]['time'] + '합니다.\n'
                #
                #
                #
                # else:
                #     txt = txt + bus_data_API.loc[i]['station_list'] + ' 정류장으로 가는 ' + bus_data_API.loc[i][
                #         'bus_num'] + '번 버스가 ' + bus_data_API.loc[i]['time'] + '뒤에 도착합니다.\n'
        table_txt = "<table width='99%' style='margin-bottom:2px;border-color:#9ABAD9;background-color:snow;padding:5px 5px 5px 5px;'><tr><td colspan=3>구기동 현대빌라 버스 정보입니다.</td></tr><tr><th>노선방향</th><th>번호</th><th>상태</th></tr>"+txt+"</table>"
        rtn_txt = "<table width='99%' style = 'margin-bottom:5px;border-collapse:collapse;border-color:#9ABAD9;border-spacing:0'> <tbody><tr><td width='20%'></td><td style='max-width:73%;background-color:#ffc702;border-color:#68cbd0;border-style:solid;border-width:1px;color:#000000;font-family:'Courier New', Courier, monospace !important;;font-size:14px;overflow:hidden;padding:10px 5px;text-align:left;vertical-align:middle;word-break:normal;' align='center'>" + table_txt + "</td><td width='7%' valign='top'><img width='45' height='50' src='./ner/img/ai_img2.png'></td></tr></tbody></table>"
        return rtn_txt

if __name__ == "__main__":
    import sys
    seq2 = seq2seq() #seq2seq 모델 객체 생성
    ner = ner_class.NER()
    intent = Intent_model()
    #kbt = ner_class.KoBertTokenizer()
    ner.create_model()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(seq2,ner, intent)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())



